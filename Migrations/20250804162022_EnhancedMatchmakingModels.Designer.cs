// <auto-generated />
using System;
using MatchmakingService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchmakingService.Migrations
{
    [DbContext(typeof(MatchmakingDbContext))]
    [Migration("20250804162022_EnhancedMatchmakingModels")]
    partial class EnhancedMatchmakingModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MatchmakingService.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CompatibilityScore")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastMessageByUserId")
                        .HasColumnType("int");

                    b.Property<string>("MatchSource")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnmatchedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UnmatchedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Match_CreatedAt");

                    b.HasIndex("User1Id")
                        .HasDatabaseName("IX_Match_User1Id");

                    b.HasIndex("User2Id")
                        .HasDatabaseName("IX_Match_User2Id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Match_User1Id_User2Id");

                    b.ToTable("Matches", t =>
                        {
                            t.HasCheckConstraint("CK_Match_UserOrder", "User1Id < User2Id");
                        });
                });

            modelBuilder.Entity("MatchmakingService.Models.MatchPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PreferenceType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PreferenceValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_MatchPreference_UserId");

                    b.HasIndex("UserId", "PreferenceType")
                        .IsUnique()
                        .HasDatabaseName("IX_MatchPreference_UserId_Type");

                    b.ToTable("MatchPreferences");
                });

            modelBuilder.Entity("MatchmakingService.Models.MatchScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ActivityScore")
                        .HasColumnType("double");

                    b.Property<double>("AgeScore")
                        .HasColumnType("double");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("EducationScore")
                        .HasColumnType("double");

                    b.Property<double>("InterestsScore")
                        .HasColumnType("double");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("LifestyleScore")
                        .HasColumnType("double");

                    b.Property<double>("LocationScore")
                        .HasColumnType("double");

                    b.Property<double>("OverallScore")
                        .HasColumnType("double");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalculatedAt")
                        .HasDatabaseName("IX_MatchScore_CalculatedAt");

                    b.HasIndex("OverallScore")
                        .HasDatabaseName("IX_MatchScore_OverallScore");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_MatchScore_UserId");

                    b.HasIndex("UserId", "TargetUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_MatchScore_UserId_TargetUserId");

                    b.ToTable("MatchScores");
                });

            modelBuilder.Entity("MatchmakingService.Models.MatchingAlgorithmMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlgorithmVersion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LikesReceived")
                        .HasColumnType("int");

                    b.Property<int>("MatchesCreated")
                        .HasColumnType("int");

                    b.Property<double>("SuccessRate")
                        .HasColumnType("double");

                    b.Property<int>("SuggestionsGenerated")
                        .HasColumnType("int");

                    b.Property<int>("SwipesReceived")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalculatedAt")
                        .HasDatabaseName("IX_MatchingAlgorithmMetric_CalculatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_MatchingAlgorithmMetric_UserId");

                    b.ToTable("MatchingAlgorithmMetrics");
                });

            modelBuilder.Entity("MatchmakingService.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MatchmakingService.Models.UserInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserInteractions");
                });

            modelBuilder.Entity("MatchmakingService.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<double>("AgeWeight")
                        .HasColumnType("double");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DrinkingStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("EducationWeight")
                        .HasColumnType("double");

                    b.Property<string>("Ethnicity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("InterestsWeight")
                        .HasColumnType("double");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("LifestyleWeight")
                        .HasColumnType("double");

                    b.Property<double>("LocationWeight")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<double>("MaxDistance")
                        .HasColumnType("double");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PreferredGender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SmokingStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WantsChildren")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Age")
                        .HasDatabaseName("IX_UserProfile_Age");

                    b.HasIndex("Gender")
                        .HasDatabaseName("IX_UserProfile_Gender");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserProfile_UserId");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("IX_UserProfile_Location");

                    b.ToTable("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
